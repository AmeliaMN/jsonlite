% Generated by roxygen2 (4.0.1): do not edit by hand
\name{stream_in, stream_out}
\alias{stream_in}
\alias{stream_in, stream_out}
\alias{stream_out}
\title{Streaming JSON input/output}
\usage{
stream_in(con, handler, pagesize = 100, verbose = TRUE, ...)
}
\arguments{
\item{con}{A \code{\link{connection}} object. If the connection is not open,
\code{stream_in} and \code{stream_out} will automatically open
and later close (and destroy) the connection. See details.}

\item{handler}{a custom function that is called on each page of JSON data. If not specified,
the default handler stores all pages and binds them into a single data frame that will be
returned by \code{stream_in}. See details.}

\item{pagesize}{number of lines to read/write from/to the connection per iteration.}

\item{verbose}{print some information on what is going on.}

\item{...}{arguments passed to \code{\link{fromJSON}} and \code{\link{toJSON}} to
control JSON formatting/parsing where applicable. Use with caution.}
}
\value{
\code{stream_out} always returns \code{NULL}.
When a custom handler function is specified, \code{stream_in} returns \code{NULL}.
When no custom handler is specified, \code{stream_in} returns a data frame of all pages
binded together.
}
\description{
The \code{stream_in} and \code{stream_out} functions implement
line-by-line processing of JSON data over a \code{\link{connection}}, such as
a socket, url, file or pipe. This allows for processing unlimited amounts of data
with limited memory. JSON streaming assumes a slightly different format than
\code{\link{fromJSON}} and \code{\link{toJSON}}, see details for more information.
}
\details{
Because parsing huge JSON strings is difficult and inefficient, JSON streaming
is done using \strong{lines of minified JSON records}. This is pretty
standard: JSON databases such as MongoDB use the same format to import/export
large datasets. Note that this means that the total stream combined is in itself
not valid JSON; only the individual lines are. Also note that because line-breaks
are used as separators, prettified JSON is not permitted: the JSON lines \emph{must}
be minified. In this respect, the format is a bit different from \code{\link{fromJSON}}
and \code{\link{toJSON}} where all lines are part of a single JSON structure, and
line breaks are optional.

The \code{handler} is a callback function which is called for each page (batch) of
JSON data with exactly one argument (usually a data frame with \code{pagesize} rows).
If \code{handler} is missing or \code{NULL}, a default handler is used which stores all
intermediate pages of data in a list, and at the very end uses \code{\link{rbind.pages}}
to bind all pages together into one single data frame that is returned by \code{\link{stream_in}}.
On the other hand, when a custom \code{handler} function is specified, \code{stream_in}
does not store any intermediate results and returns \code{NULL}.
It is then assumed that the \code{handler} takes care of processing intermediate pages.
A \code{handler} function that does not store intermediate results in memory (for
example by writing output to another connection) results in a pipeline that can process an
unlimited amount of data. See example.

If a connection is not opened yet, \code{stream_in} and \code{stream_out}
will automatically open and later close the connection. Because R destroys connections
when they are closed, they cannot be reused. To reuse a connection object for multiple
calls to \code{stream_in} and \code{stream_out}, it needs to be opened beforehand. See
example.
}
\examples{
# compare formats
x <- iris[1:3,]
toJSON(x)
stream_out(x)

\dontrun{
# stream large dataset to file and back
library(nycflights13)
stream_out(flights, file(tmp <- tempfile()), pagesize = 200)
flights2 <- stream_in(file(tmp))
unlink(tmp)
all.equal(flights2, as.data.frame(flights))

# stream from HTTP
flights3 <- stream_in(gzcon(url("http://jeroenooms.github.io/data/nycflights13.mjson.gz")))
all.equal(flights3, as.data.frame(flights))

#stream HTTPS (HTTP+SSL) via curl pipe
flights4 <- stream_in(gzcon(pipe("curl https://jeroenooms.github.io/data/nycflights13.mjson.gz")))
all.equal(flights4, as.data.frame(flights))

# Full JSON stream IO: stream from URL to file.
# Calculate delays for flights over 1000 miles in batches of 5k
library(dplyr)
con_in <- gzcon(url("http://jeroenooms.github.io/data/nycflights13.mjson.gz"))
con_out <- file(tmp <- tempfile(), open = "w")
stream_in(con_in, handler = function(df){
  df <- dplyr::filter(df, distance > 1000)
  df <- dplyr::mutate(df, delta = dep_delay - arr_delay)
  stream_out(df, con_out, pagesize = 1000)
}, pagesize = 5000)
close(con_out)

# stream it back in
mydata <- stream_in(file(tmp))
nrow(mydata)
unlink(tmp)
}
}

